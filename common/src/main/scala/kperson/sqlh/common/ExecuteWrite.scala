package kperson.sqlh.common

import kperson.sqlh.common.Row.ResultSetJDBC
import kperson.sqlh.common.SQLPrimitive._
import org.sql2o.tools.NamedParameterStatement

import java.sql.Connection

case class ExecuteWriteResponse(
  numberOfAffectedRows: Int,
  autoGeneratedKeys: List[SQLPrimitive]
)

object ExecuteWrite {

  def apply(connection: Connection, command: Write): ExecuteWriteResponse = {
    val statement = new NamedParameterStatement(connection, command.sql, true)
    statement.populateStatement(command.params)
    val numberOfAffectedRows = statement.executeUpdate()
    val autoGeneratedKeys = statement.getStatement.getGeneratedKeys.toRows().map { r =>
      r.columns.head.value
    }.toList
    ExecuteWriteResponse(numberOfAffectedRows, autoGeneratedKeys)
  }
}
