package kperson.sql.common

import kperson.sqlh.common._
import org.scalatest.matchers.should.Matchers

import ExecuteQuery._
import ExecuteWrite._


class AutoSpec extends DBTest with Matchers {

  private val defaultCreate = """
      |CREATE TABLE auto_table (
      |  id INT NOT NULL AUTO_INCREMENT,
      |  name TEXT,
      |  PRIMARY KEY (id)
      |);
      |""".stripMargin

  private val postgresCreate = """
      |CREATE TABLE auto_table (
      |  id SERIAL,
      |  name TEXT
      |);
      |""".stripMargin

  private val createSQl = TestSQL(defaultCreate, Map(Postgres -> postgresCreate))

  "Auto Table" should "read and write to DBs" in {
    foreachDB { case (dataSource, vendor) =>
      val sql = createSQl.sql(vendor)
      ConnectionPool.getConnection(dataSource).prepareStatement(sql).execute()
      (1 to 10).foreach { index =>
        val insert =
          """
        INSERT INTO auto_table (name) VALUES (:name)
      """
        val res = Write(Direct(dataSource), insert, Map("name" -> PString("bob"))).run()
        res.numberOfAffectedRows shouldBe 1
        res.autoGeneratedKeys shouldBe List(index.toString)
      }
      val update = "UPDATE auto_table SET name = 'Susan'"
      val res = Write(Direct(dataSource), update).run()
      res.numberOfAffectedRows shouldBe 10
      if (vendor == Postgres) {
        res.autoGeneratedKeys shouldBe List("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
      }
      else {
        res.autoGeneratedKeys shouldBe List()
      }
    }
  }

}
